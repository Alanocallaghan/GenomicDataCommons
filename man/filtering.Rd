% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filters.R
\name{filtering}
\alias{filter}
\alias{filter.GDCQuery}
\alias{filtering}
\alias{get_filter}
\alias{get_filter.GDCQuery}
\title{Manipulating GDCQuery filters}
\usage{
filter(x, expr)

\method{filter}{GDCQuery}(x, expr)

get_filter(x)

\method{get_filter}{GDCQuery}(x)
}
\arguments{
\item{x}{the object on which to set the filter list
member}

\item{expr}{a filter expression, where bare names
(without quotes) are allowed if they are available
fields associated with the \code{x}}
}
\description{
Manipulating GDCQuery filters

The \code{filter} is simply a safe accessor for
the filter element in \code{\link{GDCQuery}} objects.

The \code{get_filter} is simply a safe accessor for
the filter element in \code{\link{GDCQuery}} objects.
}
\examples{
# make a GDCQuery object to start
#
# Projects
#
pQuery = gdcProjects()

# check for the default fields
# so that we can use one of them to build a filter
default_fields(pQuery)
pQuery = filter(pQuery,~ project_id == 'TCGA-LUAC')
get_filter(pQuery)

#
# Files
#
fQuery = gdcFiles()
default_fields(fQuery)

fQuery = filter(fQuery,~ data_format == 'VCF')
get_filter(fQuery)

fQuery = filter(fQuery,~ data_format == 'VCF' & experimental_strategy == 'WXS' & type == 'simple_somatic_mutation')

# Use str() to get a cleaner picture
str(get_filter(fQuery))
}

