\documentclass{article}
\usepackage{hyperref}
\usepackage[maxbibnames=99,backend=biber,citestyle=authoryear,sorting=ydnt]{biblatex}
\addbibresource{gdcCitations.bib}
\title{GenomicDataCommons: a Bioconductor Interface to the NCI Genomic Data Commons}
\author{Sean R. Davis  \\
	Center for Cancer Research\\
        National Cancer Institute\\
        National Institutes of Health\\
	\and 
	Martin T. Morgan \\
	Roswell Park Cancer Institute \\
	}

\date{\today}

\def\code#1{\texttt{#1}}

\begin{document}

\maketitle


\begin{abstract}
  The National Cancer Institute (NCI) has established the Genomic Data
  Commons (\cite{Grossman2016}, \url{https://gdc.cancer.gov/}). The
  GDC provides the cancer research community with an open and unified
  repository for sharing and accessing data across numerous cancer
  studies and projects via a high-performance data transfer and query
  infrastructure.  The Bioconductor project \parencite{Huber2015} is
  an open source and open development software project built on the R
  statistical programming environment \parencite{RCoreTeam2016}.  A
  major goal of the Bioconductor project is to facilitate the use,
  analysis, and comprehension of genomic data.  The GenomicDataCommons
  Bioconductor package provides basic infrastructure for querying,
  accessing, and mining genomic datasets available from the GDC. We
  expect that the Bioconductor developer and the larger bioinformatics
  community will build on the GenomicDataCommons package to add
  higher-level functionality and expose cancer genomics data to the
  plethora of state-of-the-art bioinformatics methods available in
  Bioconductor.

\end{abstract}

\section{Introduction}

<<init,results='hide',echo=FALSE>>=
library(knitr)
opts_chunk$set(warning=FALSE,message=FALSE,results='hide')
@ 
Basic and translational cancer research projects--from large,
multicenter consortia to individual labs--now produce vast quantities
of genomic data. Such datasets are often accompanied by clinical
information and valuable experimental metadata. Two such examples
include The Cancer Genome Atlas (TCGA,
\url{https://cancergenome.nih.gov/}) and the Therapeutically
Applicable Research To Generate Effective Treatments (TARGET,
\url{https://ocg.cancer.gov/programs/target}) projects. To address the
needs of the cancer community to access, query, and utilize these
cancer-related data resources, the NCI has developed the Genomic Data
Commons (GDC, \cite{Grossman2016}). While similar in many respects to
other large-scale genomics data repositories, the GDC differs in that
data presented via the GDC have been ``harmonized'' using
stardardized, publicly-available pipelines
(\url{https://docs.gdc.cancer.gov/Data/Introduction/}). An additional
and unusual new feature of the GDC relative to most genomic data
repositories is that users can deposit and then apply GDC standardized
pipelines to their own genomic data, provided they agree to share
their data broadly (subject to data use agreements and participant
consents). Web-based queries and tools exist and are expected to grow in both number and functionality.

The Bioconductor project is an open
source and open development software project for the analysis and comprehension of genomic and molecular biology data \parencite{Huber2015}. Based on the statistical programming language, R \parencite{RCoreTeam2016}, the project comprises 1296 interoperable software packages contributed by a diverse community of scientists. Bioconductor tools to access cancer genomics data, including
RTCGA \parencite{Kosinski2016},
TCGABiolinks \parencite{Colaprico2016},
RTCGAToolbox \parencite{Samur2014} facilitate access to cancer
genomics data, but they are limited, by-and-large to TCGA data and
rely on legacy data sharing platforms. The GenomicDataCommons software
package is a new software package that provides infrastructure for
finding, accessing, and downloading cancer genomics data from the
GDC. Our expectation is that the GenomicDataCommons software package
will facilitate use of GDC data by the larger Bioconductor community
and increase the effiency of drawing biologically important
conclusions from published cancer genomic data.

\section{Design and Usage}
The goal of the GenomicDataCommons Bioconductor package is to expose the RESTful (\url{https://en.wikipedia.org/wiki/Representational_state_transfer}) application programming interface (API, \url{https://gdc.cancer.gov/developers/gdc-application-programming-interface-api}) via an R client interface. The GDC API can be roughly divided into metadata query capabilities and data download capabilities. The GenomicDataCommons package is implemented as a set of S3 classes and methods with accompanying utility functions. 

\subsection{Querying GDC metadata and finding GDC data}

Finding data in the GDC starts with a query of available metadata. We model our R interface for querying GDC metadata on a now-common approach, XXXXXX, similar in spirit to that used by packages such as dplyr \parencite{Wickham2016}. Querying the GDC API to get the unique file ids of all HTSeq quantified gene expression data from the TCGA-GBM project forms an illustrative example:

<<metaquery1,results='hide'>>=
library(GenomicDataCommons)
file_records = files() %>% 
    filter(~ cases.project.project_id == 'TCGA-GBM' &
               data_type == 'Gene Expression Quantification' &
               analysis.workflow_type == 'HTSeq - Counts') %>%
    select('file_id') %>%
    response_all()
@ 

The \code{files()} call creates a \code{GDCquery}. The \code{filter()} verb allows using R-like syntax to generate filter criteria; note that field names like ``data\_type'' can be used without quotes. The \code{select()} verb then sets the return fields, which, in this case is limited to just \code{file\_id}. Up to this point, no calls to the GDC have occurred and the \code{response\_all()} call performs the actual API call, returning a \code{GDCResponse} object. 

The GDC API also supports simple aggregation based on metadata fields, such as the number of cases summarized by GDC project.

<<agg,results='hide'>>=
cases_by_project = cases() %>% 
    facet('project.project_id') %>%
    aggregations()
@ 

The \code{cases\_by\_project} inherits from an R \code{list} and contains one \code{data.frame} for each field named in \code{facet()}. 

\subsection{Downloading data}



<<downloadSingle>>=

@ 

Bulk downloads using the \href{https://docs.gdc.cancer.gov/Data_Transfer_Tool/Users_Guide/Getting_Started/}{GDC data transfer tool} require a manifest file.  To create a manifest file from the files query above, we simply apply the \code{manifest()} verb and write the resulting \code{data.frame} to disk.

<<createManifest,results='hide'>>=
manifest_df = file_records %>%
    manifest()
@ 

Once written to a file, the \code{transfer()} function will utilize the GDC transfer client to perform robust, performant download of the data. 

\subsection{BAM file slicing}

The BAM file is the current standard for storing aligned reads against a reference. Many use cases for these alignments require only a particular genomic region rather than all alignments.  BAM ``slicing'' is implemented as a very basic wrapper upon which developers can build functionality.  

<<bamslice,results="hide">>=
# get 10 RNA-seq BAM files
files() %>% 
    filter(~ data_format=='BAM' & experimental_strategy=='RNA-Seq') %>% 
    response() %>% 
    ids()
@ 

\section{Conclusions}

\parencite{Sandve2013}

\printbibliography

\end{document}
